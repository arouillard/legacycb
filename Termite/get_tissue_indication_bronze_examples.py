# -*- coding: utf-8 -*-
"""
Andrew D. Rouillard
Computational Biologist
Target Sciences
GSK
andrew.d.rouillard@gsk.com
"""

import numpy as np
import copy
import datasetIO
from collections import defaultdict

print('begin get_tissue_indication_bronze_examples.py')

# load lists of keywords for major termite tissues
print('loading lists of keywords for major termite tissues...')
dictidname_keywords = {}
major_dictidnames = np.empty(0, dtype='object')
assigned_termite_tissue = np.empty(0, dtype='object')
assigned_gtex_tissue = np.empty(0, dtype='object')
with open('termite_tissue_keywords.txt', mode='rt', encoding='utf-8', errors='surrogateescape') as fr:
    fr.readline()
    for line in fr:
        entries = [x.strip() for x in line.split('\t')]
        keywords = entries[6].split(',')
        assigned_termite_tissue = np.insert(assigned_termite_tissue, assigned_termite_tissue.size, entries[3])
        assigned_gtex_tissue = np.insert(assigned_gtex_tissue, assigned_gtex_tissue.size, entries[5])
        major_dictidnames = np.insert(major_dictidnames, major_dictidnames.size, entries[0])
        if keywords != ['NA']:
            dictidname_keywords[major_dictidnames[-1]] = keywords

# load lists of keywords for major termite cells
print('loading lists of keywords for major termite cells...')
with open('termite_cell_keywords.txt', mode='rt', encoding='utf-8', errors='surrogateescape') as fr:
    fr.readline()
    for line in fr:
        entries = [x.strip() for x in line.split('\t')]
        keywords = entries[11].split(',')
        assigned_termite_tissue = np.insert(assigned_termite_tissue, assigned_termite_tissue.size, entries[8])
        assigned_gtex_tissue = np.insert(assigned_gtex_tissue, assigned_gtex_tissue.size, entries[10])
        major_dictidnames = np.insert(major_dictidnames, major_dictidnames.size, entries[0])
        if keywords != ['NA']:
            dictidname_keywords[major_dictidnames[-1]] = keywords

# load keyword taboos
print('loading keyword taboos...')
keyword_taboos = defaultdict(set)
with open('keyword_taboo.txt', mode='rt', encoding='utf-8', errors='surrogateescape') as fr:
    for line in fr:
        kw, tb = [x.strip() for x in line.split('\t')]
        keyword_taboos[kw].add(tb)

# load pmid counts for cell/tissue-indication pairs
# this file is generated by count_term-term_pmids_from_termite.py
print('loading pmid counts for cell/tissue-indication pairs...')
tis_ind = datasetIO.load_datamatrix('HUCELLANAT_INDICATION_datamatrix_pmidcounts_year_all_datestamp_all_minscore_2.pickle')
print(tis_ind)

# discard cells and tissues without keywords
print('discarding cells and tissues without keywords...')
tobediscarded = ~np.in1d(tis_ind.rowlabels, list(dictidname_keywords.keys()))
tis_ind.discard(tobediscarded, 0)
print(tis_ind)

# find indication-tissue matches through keywords
print('finding indication-tissue matches through keywords...')
tis_ind_kw = copy.deepcopy(tis_ind)
tis_ind_kw.matrix[:] = 0
tis_ind_kw.columnmeta['term_name_lower'] = np.array([x.lower() for x in tis_ind_kw.columnmeta['term_name']], dtype='object')
for i, tissue_dictidname in enumerate(tis_ind_kw.rowlabels):
    tissue_keywords = dictidname_keywords[tissue_dictidname]
    for j, indication_name in enumerate(tis_ind_kw.columnmeta['term_name_lower']):
        tis_ind_kw.matrix[i,j] = sum([(kw in indication_name and (sum([tb in indication_name for tb in keyword_taboos[kw]]) == 0)) for kw in tissue_keywords])
tis_ind_kw.matrix = tis_ind_kw.matrix > 0
tis_ind_kw.updatedtypeattribute()

# discard null rows and columns
print('discarding null rows and columns...')
tis_ind_kw.discard(~(tis_ind_kw.matrix.any(1)), 0)
tis_ind_kw.discard(~(tis_ind_kw.matrix.any(0)), 1)
print(tis_ind_kw)
print('bronze standard')
print('positive examples: {0!s}'.format(tis_ind_kw.matrix.sum()))
print('negative examples: {0!s}'.format((~tis_ind_kw.matrix).sum()))

# align pmid count matrix
print('aligning pmid count matrix...')
tis_ind = tis_ind.tolabels(rowlabels=tis_ind_kw.rowlabels.copy(), columnlabels=tis_ind_kw.columnlabels.copy())

# inspect indications matched to many tissues
print('saving indications matched to multiple tissues, for manual inspection...')
# used to revise keyword taboo list
num_tissues_per_indication = tis_ind_kw.matrix[tis_ind_kw.rowmeta['term_dict'] == 'ANAT',:].sum(0)
hidxs = (num_tissues_per_indication > 1).nonzero()[0]
tissues_indications = defaultdict(set)
for hidx in hidxs:
    indication = tis_ind_kw.columnmeta['term_name'][hidx]
    tissues = tuple(sorted((tis_ind_kw.rowlabels[np.logical_and(tis_ind_kw.matrix[:,hidx], tis_ind_kw.rowmeta['term_dict'] == 'ANAT')]).tolist()))
    tissues_indications[tissues].add(indication)
with open('indications_matched_to_multiple_tissues.txt', mode='wt', encoding='utf-8', errors='surrogateescape') as fw:
    for tissues, indications in tissues_indications.items():
        writelist = []
        for tissue in tissues:
            writelist += [tissue, ','.join(dictidname_keywords[tissue])]
        writelist += list(indications)
        fw.write('\t'.join(writelist) + '\n')

# inspect tissues matched to many indications
print('saving tissues matched to multiple indications, for manual inspection...')
# used to revise keyword taboo list
num_indications_per_tissue = tis_ind_kw.matrix.sum(1)
hidxs = np.logical_and(num_indications_per_tissue > 1, tis_ind_kw.rowmeta['term_dict'] == 'ANAT').nonzero()[0]
tissues_indications = defaultdict(set)
with open('tissues_matched_to_multiple_indications.txt', mode='wt', encoding='utf-8', errors='surrogateescape') as fw:
    for hidx in hidxs:
        tissue_dictidname = tis_ind_kw.rowlabels[hidx]
        tissue_keywords = ','.join(dictidname_keywords[tissue_dictidname])
        writelist = [tissue_dictidname, tissue_keywords] + (tis_ind_kw.columnmeta['term_name'][tis_ind_kw.matrix[hidx,:]]).tolist()
        fw.write('\t'.join(writelist) + '\n')

# save bronze standard positive and negative cell/tissue-indication pairs
print('saving bronze standard positive and negative cell/tissue-indication pairs...')
datasetIO.save_datamatrix('HUCELLANAT_INDICATION_datamatrix_bronzestandard_year_all_datestamp_all_minscore_2.pickle', tis_ind_kw)
datasetIO.save_datamatrix('HUCELLANAT_INDICATION_datamatrix_bronzestandard_year_all_datestamp_all_minscore_2.txt.gz', tis_ind_kw)
print(tis_ind)

print('done get_tissue_indication_bronze_examples.py')
